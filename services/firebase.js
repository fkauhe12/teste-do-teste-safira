import { getApps, getApp, initializeApp } from "firebase/app";
import {
  getDatabase,
  ref,
  set,
  get,
  child,
  serverTimestamp,
  query,
  orderByChild,
  equalTo,
} from "firebase/database";
import {
  initializeAuth,
  getAuth,
  getReactNativePersistence,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  updateProfile,
} from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import ReactNativeAsyncStorage from "@react-native-async-storage/async-storage";
import { Platform } from "react-native";

/** üîß Configura√ß√£o (.env) */
const firebaseConfig = {
  apiKey: process.env.EXPO_PUBLIC_apiKey,
  authDomain: process.env.EXPO_PUBLIC_authDomain,
  projectId: process.env.EXPO_PUBLIC_projectId,
  storageBucket: process.env.EXPO_PUBLIC_storageBucket,
  messagingSenderId: process.env.EXPO_PUBLIC_messagingSenderId,
  appId: process.env.EXPO_PUBLIC_appId,
  databaseURL: process.env.EXPO_PUBLIC_databaseURL,
};

/** üöÄ Inicializa o app (s√≥ uma vez) */
const app = getApps().length ? getApp() : initializeApp(firebaseConfig);

/** üíæ Realtime Database */
const db = getDatabase(app);

/** üî• Firestore */
const firestoreDb = getFirestore(app);

/** üîê Auth com persist√™ncia garantida */
let auth;
if (Platform.OS === "web") {
  auth = getAuth(app);
} else {
  // ‚ö†Ô∏è Nunca chame getAuth antes! InitializeAuth precisa vir primeiro.
  const existingApps = getApps();
  // Se n√£o houver Auth criado ainda, inicializa corretamente
  try {
    auth = initializeAuth(app, {
      persistence: getReactNativePersistence(ReactNativeAsyncStorage),
    });
  } catch {
    // Se j√° estava inicializado por algum outro m√≥dulo, pega a inst√¢ncia
    auth = getAuth(app);
  }
}

/** ‚úÖ Exporta√ß√µes */
export {
  app,
  db,
  firestoreDb,
  auth,
  ref,
  set,
  get,
  child,
  serverTimestamp,
  query,
  orderByChild,
  equalTo,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  updateProfile,
};